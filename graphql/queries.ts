/* eslint-disable */
// This file will be auto-generated by Amplify CLI and updated when you run 'amplify codegen'
// These are placeholder queries that will be replaced by the generated ones

export const getUser = /* GraphQL */ `
  query GetUser($id: ID!) {
    getUser(id: $id) {
      id
      username
      bio
      createdAt
      updatedAt
    }
  }
`;

export const getUserByUsername = /* GraphQL */ `
  query GetUserByUsername($username: String!) {
    getUserByUsername(username: $username) {
      id
      username
      bio
      createdAt
      updatedAt
    }
  }
`;

export const listUsers = /* GraphQL */ `
  query ListUsers(
    $filter: ModelUserFilterInput
    $limit: Int
    $nextToken: String
  ) {
    listUsers(filter: $filter, limit: $limit, nextToken: $nextToken) {
      items {
        id
        username
        bio
        createdAt
        updatedAt
      }
      nextToken
    }
  }
`;

export const getFeedback = /* GraphQL */ `
  query GetFeedback($id: ID!) {
    getFeedback(id: $id) {
      id
      userId
      message
      tags
      reply
      createdAt
      updatedAt
    }
  }
`;

export const listFeedbacks = /* GraphQL */ `
  query ListFeedbacks(
    $filter: ModelFeedbackFilterInput
    $limit: Int
    $nextToken: String
  ) {
    listFeedbacks(filter: $filter, limit: $limit, nextToken: $nextToken) {
      items {
        id
        userId
        message
        tags
        reply
        createdAt
        updatedAt
      }
      nextToken
    }
  }
`;

export const feedbacksByUser = /* GraphQL */ `
  query FeedbacksByUser(
    $userId: ID!
    $createdAt: ModelStringKeyConditionInput
    $sortDirection: ModelSortDirection
    $filter: ModelFeedbackFilterInput
    $limit: Int
    $nextToken: String
  ) {
    feedbacksByUser(
      userId: $userId
      createdAt: $createdAt
      sortDirection: $sortDirection
      filter: $filter
      limit: $limit
      nextToken: $nextToken
    ) {
      items {
        id
        userId
        message
        tags
        reply
        createdAt
        updatedAt
      }
      nextToken
    }
  }
`;

export const moderateFeedback = /* GraphQL */ `
  query ModerateFeedback($message: String!) {
    moderateFeedback(message: $message) {
      isApproved
      moderatedMessage
      reason
    }
  }
`;
